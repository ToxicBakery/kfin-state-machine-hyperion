apply plugin: 'maven'
apply plugin: 'signing'

static String getTagName() { return System.getenv('TRAVIS_TAG') ?: "" }

boolean isSnapshot() { return version.contains("SNAPSHOT") }

static boolean isTag() { return !getTagName().isEmpty() }

static boolean isTravis() { return System.getenv('TRAVIS_BUILD_NUMBER') ? true : false }

static String buildNumber() { return System.getenv('TRAVIS_BUILD_NUMBER') ?: "0" }

static String getRepositoryUsername() { return System.getenv('SONATYPE_USERNAME') ?: "" }

static String getRepositoryPassword() { return System.getenv('SONATYPE_PASSWORD') ?: "" }

static String getBranchName() { return System.getenv('TRAVIS_BRANCH') }

boolean isRelease() { return isTag() && !isSnapshot() }

afterEvaluate { project ->

    println "Tag ${getTagName()}"
    println "Branch ${getBranchName()}"
    println "Is Release ${isRelease()}"
    println "Is Travis ${isTravis()}"
    println "Has Username ${!getRepositoryUsername().empty}"
    println "Has Password ${!getRepositoryPassword().empty}"
    println "Version ${version}"

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.artifactId = POM_ARTIFACT_ID

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                snapshotRepository(url: isTravis() ? "https://oss.sonatype.org/content/repositories/snapshots" : mavenLocal().url) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                            organization POM_DEVELOPER_ORGANIZATION
                            organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
        }
    }

    signing {
        required false
        sign configurations.archives
    }

    /*task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }*/

}